import numpy as np  # Importing the NumPy library

X = np.array(([2, 9], [1, 5], [3, 6]), dtype=float)  # Creating a NumPy array X with input data
y = np.array(([92], [86], [89]), dtype=float)  # Creating a NumPy array y with output data

X = X/np.amax(X, axis=0)  # Normalizing the input data by dividing each element in X by the maximum value in its column
y = y/100  # Normalizing the output data by dividing each element in y by 100

# Defining the sigmoid function
def sigmoid(x):
    return 1/(1 + np.exp(-x))

# Defining the derivative of the sigmoid function
def derivatives_sigmoid(x):
    return x * (1 - x)

epoch = 5000  # Setting the number of training iterations
lr = 0.1  # Setting the learning rate
inputlayer_neurons = 2  # Setting the number of input layer neurons
hiddenlayer_neurons = 3  # Setting the number of hidden layer neurons
output_neurons = 1  # Setting the number of output neurons

# Initializing the weights and biases
wh = np.random.uniform(size=(inputlayer_neurons, hiddenlayer_neurons))
bh = np.random.uniform(size=(1, hiddenlayer_neurons))
wout = np.random.uniform(size=(hiddenlayer_neurons, output_neurons))
bout = np.random.uniform(size=(1, output_neurons))

# Training loop
for i in range(epoch):
    # Forward Propagation
    hinp1 = np.dot(X, wh)
    hinp = hinp1 + bh
    hlayer_act = sigmoid(hinp)
    outinp1 = np.dot(hlayer_act, wout)
    outinp = outinp1 + bout
    output = sigmoid(outinp)
    
    # Backpropagation
    EO = y - output
    outgrad = derivatives_sigmoid(output)
    d_output = EO * outgrad
    EH = d_output.dot(wout.T)
    
    hiddengrad = derivatives_sigmoid(hlayer_act)
    d_hiddenlayer = EH * hiddengrad
    
    wout += hlayer_act.T.dot(d_output) * lr
    wh += X.T.dot(d_hiddenlayer) * lr

# Printing the results
print("Input: \n" + str(X))
print("Actual Output: \n" + str(y))
print("Predicted Output: \n", output)
